class Solution {
    public int furthestBuilding(int[] heights, int bricks, int ladders) {
        PriorityQueue<Integer> pq=new PriorityQueue(); // make a priority queue for largest jump of size  ladders
        for(int i=1;i<heights.length;i++)
        {
            int jump=heights[i]-heights[i-1];
            if(jump>0)
            {
                if(pq.size()<ladders)
                {
                    pq.offer(jump);
                }
                else
                {
                    int minJump=jump;
                    if(pq.size()!=0 && pq.peek()<jump) // if we can swap a ladder jump with bricks
                    {
                        minJump=pq.remove();
                        pq.offer(jump);
                    }
                    if(bricks-minJump>=0)
                    {
                        bricks-=minJump;
                    }
                    else
                    {
                        return i-1;
                    }
                }
            }
        }
        return heights.length-1;
    }
}
